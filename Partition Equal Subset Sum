 bool canPartition(vector<int>& arr) {
        
        int sum = accumulate(arr.begin(), arr.end(), 0);
        if(sum & 1) {
            return false;
        }
        sum /= 2;
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int> (sum + 1, 0));
        // dp[n][sum]
        for(int i = 0; i < n; i++) {
            for(int s = 0; s <= sum; s++) {
               if(i == 0) {
                   dp[i][s] = ((s == arr[i]) ? 1 : 0);
               }
               else if(s == 0) {
                   dp[i][s] = 1;
               }
               else {
                   if(i - 1 >= 0 && s - arr[i] >= 0) {
                       dp[i][s] = dp[i - 1][s - arr[i]];
                   }
                   if(i - 1 >= 0) {
                       dp[i][s] |= dp[i - 1][s];
                   }
               }
            }
        }
        return (dp[n - 1][sum]);
    }
