int maxDistance(vector<vector<int>>& grid) {
        
        int n = grid.size();
        vector<vector<int>> dist(n , vector<int>(n, -1));
        queue<pair<int, int>> q;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    dist[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
        
        if(q.empty())
            return -1;
        
        int maxi = -1;
        vector<pair<int, int>> dir{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while(!q.empty()){
            queue<pair<int, int>> q1;
            while(!q.empty()){
                auto top = q.front();
                q.pop();
                int x = top.first;
                int y = top.second;
                for(int i = 0; i < 4; i++){
                    int nx = x + dir[i].first;
                    int ny = y + dir[i].second;
                    if(nx >= 0 && nx < n && ny >= 0 && ny < n && dist[nx][ny] == -1){
                        dist[nx][ny] = max(dist[nx][ny], dist[x][y] + 1);
                        maxi = max(maxi, dist[nx][ny]);
                        q1.push({nx, ny});
                    }
                }
            }
            swap(q, q1);
        }
        return maxi;
    }
