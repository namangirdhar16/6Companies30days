 int brackets[100][100];
    void print(int i, int j, int n, char &name) {
        if(i == j) {
            cout << name++ << "";
            return;
        }
        cout << "(";
        print(i, brackets[i][j], n, name);
        print(brackets[i][j] + 1, j, n, name);
        cout << ")";
    }
    string matrixChainOrder(int p[], int n){
        // code here
        int dp[n + 1][n + 1];
        memset(dp, 0, sizeof dp);
        for(int i = 0; i < n + 1; i++) {
            dp[i][i] = 0;
        }
        
        memset(brackets, 0, sizeof brackets);
        for(int l = 2; l < n; l++) {
            for(int i = 0; i < n - l + 1; i++) {
                int j = i + l - 1;
                dp[i][j] = INT_MAX;
                for(int k = i; k < j; k++) {
                    int subAns = dp[i][k] + dp[k + 1][j] + p[i - 1] * p[k] * p[j];
                    if(subAns < dp[i][j]) {
                        dp[i][j] = subAns;
                        brackets[i][j] = k;
                    }
                    
                }
            }
        }
        char ref = 'A';
        print(1, n - 1, n, ref);
    }
