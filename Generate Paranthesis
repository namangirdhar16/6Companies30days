 bool valid(string s, int len) {
        stack<char> ss;
        for(int i = 0; i < len; i++) {
            if(s[i] == '(') ss.push('(');
            else {
                 if(ss.size() == 0) return false;
                 if(ss.size() > 0 && ss.top() != '(') return false;
                 ss.pop();
            }
        }
        return ss.size() == 0;
    }
    vector<string> generateParenthesis(int n) {
        n *= 2;
        vector<string> ans;
        int p = pow(2, n);
        for(int i = 0; i < p; i++) {
            string s = "";
            for(int j = 0; j < n; j++) {
                if((1 << j) & i) {
                    s += '(';
                }
                else s += ')';
            }
            // cout << s << endl;
            if(valid(s, n)) {
                ans.push_back(s);
            }
        }
        return ans;
    }
