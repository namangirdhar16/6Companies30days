int dfs(vector<vector<int>> &grid, int i, int j, vector<vector<bool>> &vis) {
        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        if(i >= 0 && j >= 0 && i < n && j < m && !vis[i][j] && grid[i][j] == 1) {
            cnt = 1;
            vis[i][j] = true;
            cnt += dfs(grid, i + 1, j, vis);
            cnt += dfs(grid, i, j + 1, vis);
            cnt += dfs(grid, i + 1, j + 1, vis);
            cnt += dfs(grid, i - 1, j, vis);
            cnt += dfs(grid, i - 1, j - 1, vis);
            cnt += dfs(grid, i - 1, j + 1, vis);
            cnt += dfs(grid, i, j - 1, vis);
            cnt += dfs(grid, i + 1, j - 1, vis);
            return cnt;
        } 
    }
    int findMaxArea(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> vis(n, vector<bool> (m, false));
        //memset(vis, false, sizeof vis);
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(!vis[i][j]) {
                    ans = max(ans, dfs(grid, i, j, vis));
                }
            }
        }
        return ans;
    }
