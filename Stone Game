class Solution {
public:
    int dp[505][505];
    int dfs(vector<int> &piles, int l, int r) {
        if(l == r) {
            return piles[l];
        }
        if(l == r - 1) {
            return max(piles[l], piles[r]);
        }
        int &ans = dp[l][r];
        if(ans != -1) return ans;
        int op1 = dfs(piles, l + 1, r - 1);
        int op2 = dfs(piles, l + 2, r);
        int op3 = dfs(piles, l, r - 2);
        ans = max(piles[l] + min(op1, op2), piles[r] + min(op1, op3));
        return ans;
    }
    bool stoneGame(vector<int>& piles) {
        memset(dp, -1, sizeof dp);
        int sum = accumulate(piles.begin(), piles.end(), 0);
        int alice_score = dfs(piles, 0, piles.size() - 1);
        if(alice_score > sum / 2) return true;
        return false;
    }
};
