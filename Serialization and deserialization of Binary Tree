class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s = "";
        queue<TreeNode *> q;
        q.push(root);
        while(q.size() > 0) {
            TreeNode * node = q.front();
            q.pop();
            if(node != NULL) {
                s += to_string(node->val) + " ";
                q.push(node->left);
                q.push(node->right);
            }
            else {
                s += "# ";
            }
            
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        queue<TreeNode *> q;
        istringstream in(data);
        string val;
        in >> val;
        if(val == "#") {
            return NULL;
        }
       
        TreeNode * root = new TreeNode(stoi(val));
        q.push(root);
        while(q.size() > 0) {
           TreeNode * node = q.front();
            q.pop();
            in >> val;
            if(val != "#") {
                node->left = new TreeNode(stoi(val));
                q.push(node->left);
            }
            else node->left = NULL;
            in >> val;
            if(val != "#") {
                node->right = new TreeNode(stoi(val));
                q.push(node->right);
            }
            else node->right = NULL;
                
        }
        return root;
    }
};

Note: This problem is solved using level order traversal, while revising revisit 1 or more other approaches.
